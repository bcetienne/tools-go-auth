image: golang:1.24

stages:
  - lint
  - test
  - security
  - build

üíÖ Lint:
  stage: lint
  image: golang:1.24
  before_script:
    - go mod download
    - go mod tidy
    - go mod verify
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.59.1
  script:
    # Skip files and ignore errors of `typecheck`
    - golangci-lint run -v --timeout 5m --skip-files "tests/.*" --disable typecheck || true
    # If always fail, verify that there are no real linting errors instead of only typecheck errors
    - |
      OUTPUT=$(golangci-lint run --timeout 5m --disable typecheck 2>&1 || true)
      if echo "$OUTPUT" | grep -v "typecheck" | grep -E "\.go:[0-9]+:[0-9]+:"; then
        echo "Found real linting errors (not typecheck):"
        echo "$OUTPUT" | grep -v "typecheck"
        exit 1
      else
        echo "Only typecheck errors found, ignoring them"
        exit 0
      fi
  cache:
    key:
      files:
        - go.sum
    paths:
      - /go/pkg/mod
      - .cache/go-build

üóÑÔ∏è SQL Validation:
  stage: lint
  before_script:
    - go mod download
    - go mod tidy
    - go mod verify
    - apt-get update && apt-get install -y postgresql-client
  script:
    # Analyze SQL queries embedded in Go code
    - |
      echo "=== Analyzing SQL queries embedded in Go code ==="
      
      # Search for Go files containing SQL queries
      SQL_FILES=$(find . -name "*.go" -not -path "./vendor/*" -not -path "./tests/*" -exec grep -l "SELECT\|INSERT\|UPDATE\|DELETE\|CREATE\|DROP\|ALTER" {} \;)
      
      if [ -z "$SQL_FILES" ]; then
        echo "No SQL queries found in Go files"
        exit 0
      fi
      
      echo "Found SQL queries in the following files:"
      echo "$SQL_FILES"
      echo ""
      
      # Extract and validate SQL queries
      for file in $SQL_FILES; do
        echo "--- Analyzing $file ---"
      
        # Simple method to extract SQL queries
        echo "SQL queries found:"
        grep -n -A 20 -B 1 "query.*:=.*\`" "$file" | head -50
      
        echo ""
        echo "All SQL statements in this file:"
        grep -n -E "(SELECT|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER)" "$file"
      
        echo ""
      done
      
      # Specific security checks
      echo "=== Security checks ==="
      
      # Search for potential SQL injection issues
      echo "Checking for potential SQL injection vulnerabilities:"
      grep -n -r "fmt\.Sprintf.*SELECT\|fmt\.Sprintf.*INSERT\|fmt\.Sprintf.*UPDATE\|fmt\.Sprintf.*DELETE" --include="*.go" . || echo "‚úì No fmt.Sprintf with SQL found"
      
      # Search for string concatenation with SQL
      echo "Checking for string concatenation in SQL:"
      grep -n -r "\+ .*SELECT\|\+ .*INSERT\|\+ .*UPDATE\|\+ .*DELETE" --include="*.go" . || echo "‚úì No string concatenation with SQL found"
      
      # Check usage of positional parameters
      echo "Checking SQL parameter usage:"
      grep -n -r "\$[0-9]" --include="*.go" . | grep -E "SELECT|INSERT|UPDATE|DELETE" || echo "‚ö† No parameterized queries found"
      
      # Search for queries without parameters (potentially dangerous)
      echo "Checking for non-parameterized queries:"
      grep -n -r "db\.Exec\|db\.Query" --include="*.go" . | grep -v "\$" || echo "‚úì All queries appear to be parameterized"
      
      echo "=== SQL validation completed ==="
  allow_failure: true
  cache:
    key:
      files:
        - go.sum
    paths:
      - /go/pkg/mod

üß™ Tests:
  stage: test
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - go test ./tests/...
  cache:
    key:
      files:
        - go.sum
    paths:
      - /go/pkg/mod

üìä Coverage:
  stage: test
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - |
      go test -coverprofile=coverage.out -coverpkg=./auth/...,./lib/...,./model/...,./validation/... ./tests/...
      apt-get update && apt-get install -y bc
      COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
      echo "Total coverage: $COVERAGE%"
      if (( $(echo "$COVERAGE < 80.0" | bc -l) )); then
        echo "Error: Code coverage is below 80%."
        exit 1
      fi
  cache:
    key:
      files:
        - go.sum
    paths:
      - /go/pkg/mod
  coverage: '/^Total coverage: (\d+\.\d+)%$/'

üì¶ Build:
  stage: build
  image: golang:1.24
  before_script:
    - go mod download
    - go mod tidy
    - go mod verify
  script:
    - go vet ./...
    - go build -v ./...

üõ°Ô∏è Security:
  stage: security
  before_script:
    - go mod download
    - go mod tidy
    - go mod verify
  script:
    - go install golang.org/x/vuln/cmd/govulncheck@latest
    - govulncheck ./...
